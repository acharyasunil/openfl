# Copyright (C) 2020-2021 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
"""JAX/FLAX Framework Adapter plugin."""
import jax
import numpy as np
from logging import getLogger

from .framework_adapter_interface import FrameworkAdapterPluginInterface

logger = getLogger(__name__)
class FrameworkAdapterPlugin(FrameworkAdapterPluginInterface):
    """Framework adapter plugin class."""

    @staticmethod
    def get_tensor_dict(model, optimizer=None, suffix=''):
        """
        Extract tensor dict from a model and an optimizer.

        Returns:
        dict {weight name: numpy ndarray}
        """
        state = {'params': jax.tree_util.tree_map(np.array, model.params)}
        if model.opt_state is not None:
            state = state.update({'opt_state': jax.tree_util.tree_map(np.array, model.opt_state)})
        return state

    @staticmethod
    def set_tensor_dict(model, tensor_dict, optimizer=None, device='cpu'):
        """
        Set the model weights with a tensor dictionary.

        Args:
            tensor_dict: the tensor dictionary
            with_opt_vars (bool): True = include the optimizer's status.
        """
        
        model['params'] = tensor_dict['params']

        if 'opt_state' in tensor_dict:
            model['opt_state'] = tensor_dict['opt_state']
